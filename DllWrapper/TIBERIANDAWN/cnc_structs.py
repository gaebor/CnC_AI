import ctypes
import termcolor


class CncStruct(ctypes.Structure):
    _pack_ = 1

    def __repr__(self):
        self_repr = {}
        for field_name, _ in self._fields_:
            field = getattr(self, field_name)
            if isinstance(field, ctypes.Array):
                field = list(field)
            self_repr[field_name] = field
        self_repr.update(self.__dict__)
        for field in self_repr:
            if isinstance(self_repr[field], list):
                self_repr[field] = self_repr[field][:10]
        return repr(self_repr)


class CNCMultiplayerOptionsStruct(CncStruct):
    _fields_ = [
        ('MPlayerCount', ctypes.c_int),
        ('MPlayerBases', ctypes.c_int),
        ('MPlayerCredits', ctypes.c_int),
        ('MPlayerTiberium', ctypes.c_int),  # 0-9
        ('MPlayerGoodies', ctypes.c_int),
        ('MPlayerGhosts', ctypes.c_int),
        ('MPlayerSolo', ctypes.c_int),
        ('MPlayerUnitCount', ctypes.c_int),  # 0-9
        ('IsMCVDeploy', ctypes.c_bool),
        ('SpawnVisceroids', ctypes.c_bool),
        ('EnableSuperweapons', ctypes.c_bool),
        ('MPlayerShadowRegrow', ctypes.c_bool),
        ('MPlayerAftermathUnits', ctypes.c_bool),
        ('CaptureTheFlag', ctypes.c_bool),
        ('DestroyStructures', ctypes.c_bool),
        ('ModernBalance', ctypes.c_bool),
    ]


MAX_HOUSES = 32
MAX_EXPORT_CELLS = 128 * 128
MAP_MAX_WIDTH = 62
MAP_MAX_HEIGHT = MAP_MAX_WIDTH


class CNCSpiedInfoStruct(CncStruct):
    _fields_ = [('Power', ctypes.c_int), ('Drain', ctypes.c_int), ('Money', ctypes.c_int)]


class CNCPlayerInfoStruct(CncStruct):
    _fields_ = [
        ('Name', ctypes.c_char * 64),
        ('House', ctypes.c_uint8),
        ('ColorIndex', ctypes.c_int),
        ('GlyphxPlayerID', ctypes.c_uint64),
        ('Team', ctypes.c_int),
        ('StartLocationIndex', ctypes.c_int),
        ('HomeCellX', ctypes.c_uint8),
        ('HomeCellY', ctypes.c_uint8),
        ('IsAI', ctypes.c_bool),
        ('AllyFlags', ctypes.c_uint),
        ('IsDefeated', ctypes.c_bool),
        ('SpiedPowerFlags', ctypes.c_uint),
        ('SpiedMoneyFlags', ctypes.c_uint),
        ('SpiedInfo', CNCSpiedInfoStruct * MAX_HOUSES),
        ('SelectedID', ctypes.c_int),
        ('SelectedType', ctypes.c_int),
        ('ActionWithSelected', ctypes.c_uint8 * MAX_EXPORT_CELLS),
        ('ActionWithSelectedCount', ctypes.c_uint),
        ('ScreenShake', ctypes.c_uint),
        ('IsRadarJammed', ctypes.c_bool),
    ]


class StaticTile(CncStruct):
    _fields_ = [
        ('AssetName', ctypes.c_int32),
        ('ShapeIndex', ctypes.c_int32),
    ]


MAX_OBJECT_PIPS = 18


class DynamicObject(CncStruct):
    _fields_ = [
        ('AssetName', ctypes.c_int32),
        ('ShapeIndex', ctypes.c_int32),
        ('Owner', ctypes.c_int32),
        ('Pips', ctypes.c_int32 * MAX_OBJECT_PIPS),
        ('PositionX', ctypes.c_float),
        ('PositionY', ctypes.c_float),
        ('Strength', ctypes.c_float),
        ('IsSelected', ctypes.c_float),
        ('IsRepairing', ctypes.c_float),
        ('Cloak', ctypes.c_float),
        ('ControlGroup', ctypes.c_float),
    ]


class SidebarEntry(CncStruct):
    _fields_ = [
        ('AssetName', ctypes.c_int32),
        ('Progress', ctypes.c_float),
        ('Cost', ctypes.c_float),
        ('BuildTime', ctypes.c_float),
        ('Constructing', ctypes.c_float),
        ('ConstructionOnHold', ctypes.c_float),
        ('Busy', ctypes.c_float),
    ]


class SideBarView(CncStruct):
    _fields_ = [
        ('Credits', ctypes.c_float),
        ('PowerProduced', ctypes.c_float),
        ('PowerDrained', ctypes.c_float),
        ('RepairBtnEnabled', ctypes.c_float),
        ('SellBtnEnabled', ctypes.c_float),
        ('RadarMapActive', ctypes.c_float),
        ('Count', ctypes.c_size_t),
        ('Entries', ctypes.POINTER(SidebarEntry)),
    ]


class VectorRepresentationView(CncStruct):
    _fields_ = [
        ('map', ctypes.POINTER(StaticTile)),
        ('dynamic_objects_count', ctypes.c_size_t),
        ('dynamic_objects', ctypes.POINTER(DynamicObject)),
    ]


class PlayerVectorRepresentationView(VectorRepresentationView):
    _fields_ = [('sidebar', SideBarView)]


static_tile_names = [
    "",
    "B1",
    "B2",
    "B3",
    "B4",
    "B5",
    "B6",
    "BIB1",
    "BIB2",
    "BIB3",
    "BR1",
    "BR2",
    "BR3",
    "BR4",
    "BR6",
    "BR7",
    "BR8",
    "BR9",
    "BRIDGE1",
    "BRIDGE1D",
    "BRIDGE2",
    "BRIDGE2D",
    "BRIDGE3",
    "BRIDGE3D",
    "BRIDGE4",
    "BRIDGE4D",
    "CLEAR1",
    "CR1",
    "CR2",
    "CR3",
    "CR4",
    "CR5",
    "CR6",
    "D01",
    "D02",
    "D03",
    "D04",
    "D05",
    "D06",
    "D07",
    "D08",
    "D09",
    "D10",
    "D11",
    "D12",
    "D13",
    "D14",
    "D15",
    "D16",
    "D17",
    "D18",
    "D19",
    "D20",
    "D21",
    "D22",
    "D23",
    "D24",
    "D25",
    "D26",
    "D27",
    "D28",
    "D29",
    "D30",
    "D31",
    "D32",
    "D33",
    "D34",
    "D35",
    "D36",
    "D37",
    "D38",
    "D39",
    "D40",
    "D41",
    "D42",
    "D43",
    "FALL1",
    "FALL2",
    "FALLS1",
    "FALLS2",
    "FORD1",
    "FORD2",
    "P01",
    "P02",
    "P03",
    "P04",
    "P05",
    "P06",
    "P07",
    "P08",
    "P13",
    "P14",
    "P15",
    "P16",
    "P17",
    "P18",
    "P19",
    "P20",
    "RV01",
    "RV02",
    "RV03",
    "RV04",
    "RV05",
    "RV06",
    "RV07",
    "RV08",
    "RV09",
    "RV10",
    "RV11",
    "RV12",
    "RV13",
    "RV14",
    "RV15",
    "RV16",
    "RV17",
    "RV18",
    "RV19",
    "RV20",
    "RV21",
    "RV22",
    "RV23",
    "RV24",
    "RV25",
    "S01",
    "S02",
    "S03",
    "S04",
    "S05",
    "S06",
    "S07",
    "S08",
    "S09",
    "S10",
    "S11",
    "S12",
    "S13",
    "S14",
    "S15",
    "S16",
    "S17",
    "S18",
    "S19",
    "S20",
    "S21",
    "S22",
    "S23",
    "S24",
    "S25",
    "S26",
    "S27",
    "S28",
    "S29",
    "S30",
    "S31",
    "S32",
    "S33",
    "S34",
    "S35",
    "S36",
    "S37",
    "S38",
    "SC1",
    "SC2",
    "SC3",
    "SC4",
    "SC5",
    "SC6",
    "SH1",
    "SH10",
    "SH11",
    "SH12",
    "SH13",
    "SH14",
    "SH15",
    "SH16",
    "SH17",
    "SH18",
    "SH19",
    "SH2",
    "SH20",
    "SH21",
    "SH22",
    "SH23",
    "SH24",
    "SH25",
    "SH26",
    "SH27",
    "SH28",
    "SH29",
    "SH3",
    "SH30",
    "SH31",
    "SH32",
    "SH33",
    "SH34",
    "SH35",
    "SH36",
    "SH37",
    "SH38",
    "SH39",
    "SH4",
    "SH40",
    "SH41",
    "SH42",
    "SH43",
    "SH44",
    "SH45",
    "SH46",
    "SH47",
    "SH48",
    "SH49",
    "SH5",
    "SH50",
    "SH51",
    "SH52",
    "SH53",
    "SH54",
    "SH55",
    "SH56",
    "SH57",
    "SH58",
    "SH59",
    "SH6",
    "SH60",
    "SH61",
    "SH62",
    "SH63",
    "SH7",
    "SH8",
    "SH9",
    "SR1",
    "SR2",
    "TI1",
    "TI10",
    "TI11",
    "TI12",
    "TI2",
    "TI3",
    "TI4",
    "TI5",
    "TI6",
    "TI7",
    "TI8",
    "TI9",
    "V12",
    "V13",
    "V14",
    "V15",
    "V16",
    "V17",
    "V18",
    "W1",
    "W2",
]

dynamic_object_names = [
    "",
    "A10",
    "AFLD",
    "AFLDMAKE",
    "APC",
    "ARCO",
    "ARTY",
    "ATWR",
    "ATWRMAKE",
    "BARB",
    "BARL",
    "BGGY",
    "BIKE",
    "BIO",
    "BIOMAKE",
    "BOAT",
    "BRIK",
    "C1",
    "C10",
    "C17",
    "C2",
    "C3",
    "C4",
    "C5",
    "C6",
    "C7",
    "C8",
    "C9",
    "CHAN",
    "CYCL",
    "DELPHI",
    "E1",
    "E2",
    "E3",
    "E4",
    "E5",
    "E6",
    "EYE",
    "EYEMAKE",
    "FACT",
    "FACTMAKE",
    "FIX",
    "FIXMAKE",
    "FTNK",
    "GTWR",
    "GTWRMAKE",
    "GUN",
    "GUNMAKE",
    "HAND",
    "HANDMAKE",
    "HARV",
    "HELI",
    "HOSP",
    "HOSPMAKE",
    "HPAD",
    "HPADMAKE",
    "HQ",
    "HQMAKE",
    "HTNK",
    "JEEP",
    "LST",
    "LTNK",
    "MCV",
    "MHQ",
    "MISS",
    "MLRS",
    "MOEBIUS",
    "MSAM",
    "MTNK",
    "NUK2",
    "NUK2MAKE",
    "NUKE",
    "NUKEMAKE",
    "OBLI",
    "OBLIMAKE",
    "ORCA",
    "PBOX",
    "PBOXMAKE",
    "PROC",
    "PROCMAKE",
    "PYLE",
    "PYLEMAKE",
    "RAPT",
    "RMBO",
    "ROCK1",
    "ROCK2",
    "ROCK3",
    "ROCK4",
    "ROCK5",
    "ROCK6",
    "ROCK7",
    "SAM",
    "SAMMAKE",
    "SBAG",
    "SILO",
    "SILOMAKE",
    "SPLIT2",
    "SPLIT3",
    "STEG",
    "STNK",
    "T01",
    "T02",
    "T03",
    "T04",
    "T05",
    "T06",
    "T07",
    "T08",
    "T09",
    "T10",
    "T11",
    "T12",
    "T13",
    "T14",
    "T15",
    "T16",
    "T17",
    "T18",
    "TC01",
    "TC02",
    "TC03",
    "TC04",
    "TC05",
    "TMPL",
    "TMPLMAKE",
    "TRAN",
    "TREX",
    "TRIC",
    "TRUK",
    "V01",
    "V02",
    "V03",
    "V04",
    "V05",
    "V06",
    "V07",
    "V08",
    "V09",
    "V10",
    "V11",
    "V19",
    "V20",
    "V21",
    "V22",
    "V23",
    "V24",
    "V25",
    "V26",
    "V27",
    "V28",
    "V29",
    "V30",
    "V31",
    "V32",
    "V33",
    "V34",
    "V35",
    "V36",
    "V37",
    "VICE",
    "WEAP",
    "WEAP2",
    "WEAPMAKE",
    "WOOD",
    "WCRATE",
    "SCRATE",
]


def decode_cell(tile_name_index):
    text = static_tile_names[tile_name_index]
    if text.startswith('TI'):  # tiberium
        text = '  '
        background = 'on_green'
    elif text.startswith('CLEAR'):
        text = '  '
        background = 'on_grey'
    else:
        text = '{:2s}'.format(text[:2])
        background = 'on_grey'

    return (text, 'white', background)


color_map = ['yellow', 'blue', 'red', 'white', 'magenta', 'cyan']


def print_game_state(game_state: VectorRepresentationView):
    map_list = [
        [
            decode_cell(game_state.map[i * MAP_MAX_WIDTH + j].AssetName)
            for j in range(MAP_MAX_WIDTH)
        ]
        for i in range(MAP_MAX_HEIGHT)
    ]
    for i in range(game_state.dynamic_objects_count):
        thing = game_state.dynamic_objects[i]
        x, y = int(thing.PositionY) // 24, int(thing.PositionX) // 24
        color = 'white'
        if thing.Owner != 255:
            color = color_map[thing.Owner]
        map_list[x][y] = (
            '{:2s}'.format(dynamic_object_names[thing.AssetName][:2]),
            color,
            map_list[x][y][2],
        )
    return '\n'.join(map(lambda row: ''.join(termcolor.colored(*cell) for cell in row), map_list))
